name: RDP-client without docker

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create or update RDP user from secrets (secure)
        env:
          RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          if (-not $env:RDP_USERNAME -or -not $env:RDP_PASSWORD) {
              Write-Error "RDP_USERNAME and/or RDP_PASSWORD secrets are not set."
              exit 1
          }

          $username = $env:RDP_USERNAME
          $plain = $env:RDP_PASSWORD

          $securePass = ConvertTo-SecureString $plain -AsPlainText -Force

          try {
              if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                  Set-LocalUser -Name $username -Password $securePass -ErrorAction Stop
              } else {
                  New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -ErrorAction Stop
              }

              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction Stop
              Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          } catch {
              Write-Error "Failed to create or update local user: $_"
              exit 1
          } finally {
              # Clear plaintext password variable ASAP
              $plain = $null
              [System.GC]::Collect()
              [System.GC]::WaitForPendingFinalizers()
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale connection and verify RDP port
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
              Write-Error "TAILSCALE_AUTH_KEY secret is not set."
              exit 1
          }

          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          $testResult = Test-NetConnection -ComputerName $tsIP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }

    - name: Install Google Play Games for PC (attempt)
        env:
          GOOGLE_PLAY_URL: ${{ secrets.GOOGLE_PLAY_URL }}
        run: |
          Write-Host "Attempting to install Google Play Games for PC. Note: this may require Microsoft Store or interactive install; success is not guaranteed on hosted runners."
          $gpUrl = $env:GOOGLE_PLAY_URL
          if (-not $gpUrl -or $gpUrl -eq "") {
              # Default fallback URL placeholder. Replace with official installer URL or set secret GOOGLE_PLAY_URL
              $gpUrl = "https://dl.google.com/tag/s/CiZ7NDdCMDdENzEtNTA1RC00NjY1LUFGRDQtNDk3MkEzMEM2NTMwfRIEYmV0YRrKAQrHAQgKEmpNS1QtR1BSLW5hLXVzLTE3MTIwMTQtTWVkLWhhc2VtLXB5LWdwZ2JldGEtT2N0MjgyNS1UZXh0X1NlYXJjaF9CS1dTLUdQRy1MUFRlc3R8QlJPfE9OU0VNX2t3aWRfMzg0NTA3MDE2MDM5GhZodHRwczovL3d3dy5nb29nbGUuY29tIjp1dG1fc291cmNlPW5hX01lZCZ1dG1fY29udGVudD1PY3QyODI1JnV0bV9jYW1wYWlnbj1ncGdiZXRhKJaD1AkqKwjuCxImezYwZWM3NTVmLWEwNjgtNGIzZi1hMWI4LWE5M2NhNTExYTIzOX1AAUoFZW4tVVM/play/games/install/Install-GooglePlayGames.exe"
              Write-Host "No GOOGLE_PLAY_URL secret set; using fallback URL: $gpUrl"
          } else {
              Write-Host "Using GOOGLE_PLAY_URL from secrets."
          }

          $installer = "$env:TEMP\googleplaygames_installer.exe"
          try {
              Write-Host "Downloading Google Play Games installer..."
              Invoke-WebRequest -Uri $gpUrl -OutFile $installer -UseBasicParsing -ErrorAction Stop
              Write-Host "Downloaded to $installer"
          } catch {
              Write-Warning "Failed to download Google Play Games installer: $_"
          }

          if (Test-Path $installer) {
              try {
                  Write-Host "Attempting silent install..."
                  Start-Process -FilePath $installer -ArgumentList "/S" -Wait -NoNewWindow -ErrorAction Stop
              } catch {
                  Write-Warning "Silent install failed or not supported: $_"
                  try {
                      Write-Host "Attempting /quiet install..."
                      Start-Process -FilePath $installer -ArgumentList "/quiet" -Wait -NoNewWindow -ErrorAction Stop
                  } catch {
                      Write-Warning "Unattended install attempts failed: $_"
                  }
              }
              Remove-Item $installer -Force -ErrorAction SilentlyContinue
          } else {
              Write-Warning "Installer file not downloaded; skipping installer execution."
          }

          # winget attempt for Google Play Games (package id may vary; try common ids)
          try {
              Write-Host "Trying winget to install Google Play Games (if available)..."
              winget install --silent --accept-package-agreements --accept-source-agreements "Google.Play.Games" || winget install --silent --accept-package-agreements --accept-source-agreements "GooglePlayGames"
          } catch {
              Write-Host "winget install attempts for Google Play Games may not be available or failed: $_"
          }

          # Basic verification
          Start-Sleep -Seconds 5
          $proc = Get-Process -Name "GooglePlayGames" -ErrorAction SilentlyContinue
          if ($proc) {
              Write-Host "Google Play Games process detected: $($proc.Id)"
          } else {
              Write-Warning "Google Play Games process not detected. If this is required, consider using a self-hosted runner with GUI/virtualization capabilities or provide an official installer URL in secrets."
          }

      - name: Notify Discord that RDP client is active (optional)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          function Send-DiscordMessage($message) {
              if (-not $env:DISCORD_WEBHOOK) {
                  Write-Host "DISCORD_WEBHOOK not set; skipping Discord notification."
                  return
              }
              $payload = @{ content = $message } | ConvertTo-Json -Compress
              try {
                  Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
              } catch {
                  Write-Error "Failed to send Discord message: $_"
              }
          }

          # Only send a minimal non-sensitive message; skip if webhook is not configured.
          Send-DiscordMessage "rdp-client active"

      - name: Maintain connection and periodic heartbeat (Discord optional)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          function Send-DiscordMessage($message) {
              if (-not $env:DISCORD_WEBHOOK) {
                  Write-Host "DISCORD_WEBHOOK not set; skipping Discord heartbeat."
                  return
              }
              $payload = @{ content = $message } | ConvertTo-Json -Compress
              try {
                  Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
              } catch {
                  Write-Error "Failed to send Discord message: $_"
              }
          }

          while ($true) {
              Send-DiscordMessage "rdp-client active"
              Start-Sleep -Seconds 300
          }