name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Install Docker
        run: |
          Write-Host "Attempting to install Docker..."
          try {
              Install-Module -Name DockerMsftProvider -Repository PSGallery -Force -ErrorAction Stop
              Install-Package -Name docker -ProviderName DockerMsftProvider -Force -ErrorAction Stop
              Start-Service docker -ErrorAction SilentlyContinue
              Write-Host "Docker Engine installed via DockerMsftProvider."
          } catch {
              Write-Host "Falling back to Chocolatey Docker Desktop..."
              choco install docker-desktop -y --no-progress
              $ddPath = 'C:\Program Files\Docker\Docker\Docker Desktop.exe'
              if (Test-Path $ddPath) {
                  Start-Process -FilePath $ddPath -ArgumentList "--accept-license" -WindowStyle Hidden
                  Write-Host "Docker Desktop installed and start attempted."
              } else {
                  Write-Host "Docker Desktop installer not found after choco install; installation may require reboot."
              }
          }
          try {
              docker --version
          } catch {
              Write-Host "Warning: docker command not available in PATH yet."
          }

      - name: Create or update RDP user from secrets (secure)
        env:
          RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          # Fail early if secrets are not present (avoid proceeding with defaults)
          if (-not $env:RDP_USERNAME -or -not $env:RDP_PASSWORD) {
              Write-Error "RDP_USERNAME and/or RDP_PASSWORD secrets are not set."
              exit 1
          }

          $username = $env:RDP_USERNAME
          $plain = $env:RDP_PASSWORD

          # Convert to SecureString and create/update the local user.
          # Do NOT write plaintext anywhere or echo it.
          $securePass = ConvertTo-SecureString $plain -AsPlainText -Force

          try {
              if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                  Set-LocalUser -Name $username -Password $securePass -ErrorAction Stop
              } else {
                  New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -ErrorAction Stop
              }

              # Grant necessary groups; failure to add to Administrators is non-fatal.
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction Stop
              Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          } catch {
              Write-Error "Failed to create or update local user: $_"
              exit 1
          } finally {
              # Clear plaintext variable from memory ASAP
              $plain = $null
              [System.GC]::Collect()
              [System.GC]::WaitForPendingFinalizers()
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale connection and verify RDP port
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
              Write-Error "TAILSCALE_AUTH_KEY secret is not set."
              exit 1
          }

          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          # Validate RDP port is reachable before reporting status.
          $testResult = Test-NetConnection -ComputerName $tsIP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }

      - name: Notify Discord that RDP client is active (minimal, no secrets)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if (-not $env:DISCORD_WEBHOOK) {
              Write-Error "DISCORD_WEBHOOK secret is not set."
              exit 1
          }

          # Only send a single minimal non-sensitive message.
          $payload = @{ content = "rdp-client active" } | ConvertTo-Json -Compress
          try {
              Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
          } catch {
              Write-Error "Failed to send Discord status message: $_"
          }

      - name: Maintain connection and periodic heartbeat
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if (-not $env:DISCORD_WEBHOOK) {
              Write-Error "DISCORD_WEBHOOK secret is not set."
              exit 1
          }

          function Send-DiscordMessage($message) {
              $payload = @{ content = $message } | ConvertTo-Json -Compress
              try {
                  Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
              } catch {
                  Write-Error "Failed to send Discord message: $_"
              }
          }

          while ($true) {
              Send-DiscordMessage "rdp-client active"
              Start-Sleep -Seconds 300
          }          } catch {
              Write-Host "DockerMsftProvider approach failed or not supported, falling back to Chocolatey Docker Desktop..."
              # Install via Chocolatey (Docker Desktop); chocolatey is available on GitHub Windows runners
              choco install docker-desktop -y --no-progress
              # Attempt to start Docker Desktop if installer set it up
              $ddPath = 'C:\Program Files\Docker\Docker\Docker Desktop.exe'
              if (Test-Path $ddPath) {
                  Start-Process -FilePath $ddPath -ArgumentList "--accept-license" -WindowStyle Hidden
                  Write-Host "Docker Desktop installed and start attempted."
              } else {
                  Write-Host "Docker Desktop installer not found after choco install; installation may require reboot."
              }
          }
          # Verify docker availability
          try {
              docker --version
          } catch {
              Write-Host "Warning: docker command not available in PATH yet. A reboot or session restart may be required."
          }

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility and notify Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          function Send-DiscordMessage($message) {
              # Compose JSON payload and POST to webhook. The webhook is stored in a repository secret.
              $payload = @{ content = $message } | ConvertTo-Json -Compress
              try {
                  Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
              } catch {
                  Write-Error "Failed to send Discord message: $_"
              }
          }

          $tsIP = $env:TAILSCALE_IP
          Send-DiscordMessage "Tailscale IP: $tsIP"

          $testResult = Test-NetConnection -ComputerName $tsIP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Send-DiscordMessage "TCP connection to RDP port 3389 failed for $tsIP"
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Send-DiscordMessage "TCP connectivity to $tsIP:3389 successful!"

      - name: Maintain Connection and send periodic Discord pings
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          function Send-DiscordMessage($message) {
              $payload = @{ content = $message } | ConvertTo-Json -Compress
              try {
                  Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
              } catch {
                  Write-Error "Failed to send Discord message: $_"
              }
          }

          $creds = $env:RDP_CREDS
          $tsIP = $env:TAILSCALE_IP

          # Send initial access info to Discord (credentials included)
          Send-DiscordMessage "=== RDP ACCESS ===`nAddress: $tsIP`nCredentials: $creds`n=================="

          while ($true) {
              $timestamp = Get-Date -Format o
              Send-DiscordMessage "[$timestamp] RDP Active"
              Start-Sleep -Seconds 300
          }
