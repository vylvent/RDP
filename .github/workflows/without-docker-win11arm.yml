name: RDP-client win11-arm

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-11-arm
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create or update RDP user from secrets (secure)
        env:
          RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          if (-not $env:RDP_USERNAME -or -not $env:RDP_PASSWORD) {
              Write-Error "RDP_USERNAME and/or RDP_PASSWORD secrets are not set."
              exit 1
          }

          $username = $env:RDP_USERNAME
          $plain = $env:RDP_PASSWORD

          $securePass = ConvertTo-SecureString $plain -AsPlainText -Force

          try {
              if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                  Set-LocalUser -Name $username -Password $securePass -ErrorAction Stop
              } else {
                  New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -ErrorAction Stop
              }

              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction Stop
              Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          } catch {
              Write-Error "Failed to create or update local user: $_"
              exit 1
          } finally {
              # Clear plaintext password variable ASAP
              $plain = $null
              [System.GC]::Collect()
              [System.GC]::WaitForPendingFinalizers()
          }

      - name: Install Tailscale
        run: |
          $installerPath = "$env:TEMP\tailscale-setup.exe"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile $installerPath
          Start-Process -FilePath $installerPath -ArgumentList "/quiet" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale connection and verify RDP port
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
              Write-Error "TAILSCALE_AUTH_KEY secret is not set."
              exit 1
          }

          & "C:\Program Files\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          $testResult = Test-NetConnection -ComputerName $tsIP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }

      - name: Notify Discord that RDP client is active (optional)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          function Send-DiscordMessage($message) {
              if (-not $env:DISCORD_WEBHOOK) {
                  Write-Host "DISCORD_WEBHOOK not set; skipping Discord notification."
                  return
              }
              $payload = @{ content = $message } | ConvertTo-Json -Compress
              try {
                  Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
              } catch {
                  Write-Error "Failed to send Discord message: $_"
              }
          }

          # Only send a minimal non-sensitive message; skip if webhook is not configured.
          Send-DiscordMessage "rdp-client active"

      - name: Maintain connection and periodic heartbeat (Discord optional)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          function Send-DiscordMessage($message) {
              if (-not $env:DISCORD_WEBHOOK) {
                  Write-Host "DISCORD_WEBHOOK not set; skipping Discord heartbeat."
                  return
              }
              $payload = @{ content = $message } | ConvertTo-Json -Compress
              try {
                  Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop
              } catch {
                  Write-Error "Failed to send Discord message: $_"
              }
          }

          while ($true) {
              Send-DiscordMessage "rdp-client active"
              Start-Sleep -Seconds 300
          }