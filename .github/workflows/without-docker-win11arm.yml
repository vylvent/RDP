name: RDP-client-win11-arm

on:
  workflow_dispatch:

jobs:
  rdp-session:
    runs-on: windows-11-arm
    timeout-minutes: 360

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup RDP User and Service
        env:
          RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        shell: pwsh
        run: |
          if (-not $env:RDP_USERNAME -or -not $env:RDP_PASSWORD) {
            Write-Error "RDP_USERNAME and RDP_PASSWORD secrets must be set in repository settings."
            exit 1
          }

          # Create and configure the user
          $username = $env:RDP_USERNAME
          $password = ConvertTo-SecureString -String $env:RDP_PASSWORD -AsPlainText -Force
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "User '$username' already exists. Setting new password."
            Set-LocalUser -Name $username -Password $password
          } else {
            Write-Host "Creating new user '$username'."
            New-LocalUser -Name $username -Password $password -FullName "RDP User"
            Set-LocalUser -Name $username -PasswordNeverExpires $true
          }
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Write-Host "User '$username' configured for RDP and administrator access."

          # Enable RDP and configure firewall
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Write-Host "RDP service and firewall have been configured."

      - name: Install and Connect Tailscale
        env:
          TS_AUTH_KEY: ${{ secrets.TS_AUTH_KEY }}
        shell: pwsh
        run: |
          if (-not $env:TS_AUTH_KEY) {
            Write-Error "TS_AUTH_KEY secret must be set in repository settings."
            exit 1
          }
          
          # Download Tailscale installer
          $installerPath = "C:\Users\runneradmin\Downloads\tailscale-setup.exe"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile $installerPath
          
          # Install Tailscale silently
          Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
          
          # Connect to Tailscale
          & "C:\Program Files\Tailscale\tailscale.exe" up --authkey $env:TS_AUTH_KEY --hostname "github-runner"

      - name: Notify Discord with Connection Info
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
        shell: pwsh
        run: |
          if (-not $env:DISCORD_WEBHOOK_URL) {
            Write-Host "DISCORD_WEBHOOK_URL secret not set. Skipping notification."
            exit 0
          }

          # Get the Tailscale IP Address
          $ts_ip = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
          if (-not $ts_ip) {
            $ts_ip = "Error: Could not retrieve IP"
          }

          # Construct the JSON payload for Discord using an embed
          $payload = @{
            embeds = @(
              @{
                title = "âœ… RDP Runner is Ready for Connection"
                description = "Your GitHub Actions runner is configured and waiting for a connection."
                color = 3447003 # Blue
                fields = @(
                  @{
                    name = "Tailscale IP Address"
                    value = "`$ts_ip`"
                    inline = $false
                  },
                  @{
                    name = "Username"
                    value = "`$($env:RDP_USERNAME)`"
                    inline = $false
                  },
                  @{
                    name = "Password"
                    value = "Use the password from your repository secrets (`RDP_PASSWORD`)."
                    inline = $false
                  }
                )
                footer = @{
                  text = "This session will remain active for up to 6 hours."
                }
              }
            )
          } | ConvertTo-Json -Depth 5

          # Send the notification
          Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK_URL -Method Post -Body $payload -ContentType 'application/json'
          Write-Host "Successfully sent connection details to Discord."

      - name: Wait for RDP Connection
        shell: pwsh
        run: |
          Write-Host "The runner is ready for an RDP connection."
          Write-Host "This job will remain active for up to 6 hours."
          Start-Sleep -Seconds 21600