name: RDP-client win11-arm

on:
  workflow_dispatch:

defaults:
  run:
    shell: pwsh

jobs:
  secure-rdp:
    runs-on: windows-11-arm
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP settings
        run: |
          # Allow incoming RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name 'fDenyTSConnections' -Value 0 -Force

          # Compatibility settings (adjust for your security needs)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'SecurityLayer' -Value 0 -Force

          try { netsh advfirewall firewall delete rule name='RDP-Tailscale' 2>$null } catch {}
          netsh advfirewall firewall add rule name='RDP-Tailscale' `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create or update RDP user from secrets
        env:
          RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          if (-not $env:RDP_USERNAME -or -not $env:RDP_PASSWORD) {
            Write-Error 'RDP_USERNAME and/or RDP_PASSWORD secrets are not set.'
            exit 1
          }

          $username = $env:RDP_USERNAME
          $plain = $env:RDP_PASSWORD

          $securePass = ConvertTo-SecureString $plain -AsPlainText -Force
          $plain = $null
          [System.GC]::Collect()
          [System.GC]::WaitForPendingFinalizers()

          try {
            $existing = Get-LocalUser -Name $username -ErrorAction SilentlyContinue
            if ($existing) {
              Set-LocalUser -Name $username -Password $securePass -ErrorAction Stop
            } else {
              New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -ErrorAction Stop
            }

            Add-LocalGroupMember -Group 'Remote Desktop Users' -Member $username -ErrorAction Stop
            Add-LocalGroupMember -Group 'Administrators' -Member $username -ErrorAction SilentlyContinue
          } catch {
            Write-Error "Failed to create or update local user: $_"
            exit 1
          }

      - name: Install Tailscale
        run: |
          $installerPath = Join-Path $env:TEMP 'tailscale-setup.exe'
          try {
            Invoke-WebRequest -Uri 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe' -OutFile $installerPath -UseBasicParsing -ErrorAction Stop
            Start-Process -FilePath $installerPath -ArgumentList '/quiet' -Wait -ErrorAction Stop
          } catch {
            Write-Error "Failed to download or install Tailscale: $_"
            exit 1
          } finally {
            if (Test-Path $installerPath) { Remove-Item $installerPath -Force -ErrorAction SilentlyContinue }
          }

      - name: Establish Tailscale connection and verify RDP port
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
            Write-Error 'TAILSCALE_AUTH_KEY secret is not set.'
            exit 1
          }

          $tailscaleExe = 'C:\Program Files\Tailscale\tailscale.exe'
          if (-not (Test-Path $tailscaleExe)) {
            Write-Error "Tailscale executable not found at $tailscaleExe"
            exit 1
          }

          & $tailscaleExe version || Write-Host 'tailscale version failed to run'

          # Ensure the service is running
          try { Start-Service -Name Tailscale -ErrorAction Stop } catch { Write-Host "Start-Service Tailscale returned: $_" }

          $serviceTimeout = 60
          $serviceTimer = [System.Diagnostics.Stopwatch]::StartNew()
          while ((Get-Service -Name Tailscale -ErrorAction SilentlyContinue).Status -ne 'Running') {
            if ($serviceTimer.Elapsed.TotalSeconds -ge $serviceTimeout) {
              Write-Error 'Timed out waiting for the Tailscale service to start.'
              Get-Service -Name Tailscale -ErrorAction SilentlyContinue | Format-List * | Out-String | Write-Host
              exit 1
            }
            Write-Host 'Waiting for Tailscale service to start...'
            Start-Sleep -Seconds 2
          }
          Write-Host 'Tailscale service is running.'

          # Use documented flags for non-interactive Windows runs. The key must be a reusable pre-auth key.
          $hostname = "gh-runner-$($env:GITHUB_RUN_ID)"
          $auth = $env:TAILSCALE_AUTH_KEY

          Write-Host "Running: tailscale up --auth-key=*** --hostname=$hostname --accept-routes --unattended --reset --timeout=60"
          $upOutput = & $tailscaleExe up --auth-key="$auth" --hostname="$hostname" --accept-routes --unattended --reset --timeout=60 2>&1
          Write-Host '=== tailscale up output ==='
          $upOutput | ForEach-Object { Write-Host $_ }

          # Poll for Running backend state
          $timeout = 300
          $interval = 5
          $timer = [System.Diagnostics.Stopwatch]::StartNew()
          $status = $null
          while ($timer.Elapsed.TotalSeconds -lt $timeout) {
            try {
              $raw = & $tailscaleExe status --json 2>$null
              if ($raw) {
                try { $status = $raw | ConvertFrom-Json -ErrorAction Stop } catch { $status = $null }
              }
            } catch {}
            $currentState = if ($status -and $status.PSObject.Properties.Match('BackendState')) { $status.BackendState } else { 'NoState' }
            Write-Host "Waiting for Tailscale to connect... Current state: $currentState"
            if ($status -and $status.BackendState -eq 'Running') { Write-Host 'Tailscale is connected and running.'; break }
            if ($status -and ($status.BackendState -in @('NeedsLogin','AuthFailed','Stopped'))) { Write-Host "Terminal backend state: $($status.BackendState)"; break }
            Start-Sleep -Seconds $interval
          }

          if (-not $status -or $status.BackendState -ne 'Running') {
            Write-Error "Timed out or failed waiting for Tailscale to connect. Final state: $($status.BackendState 2>$null)."
            Write-Host '`n--- tailscale up captured output ---'
            $upOutput | ForEach-Object { Write-Host $_ }
            Write-Host '`n--- tailscale status (raw) ---'
            & $tailscaleExe status || Write-Host 'tailscale status failed'
            Write-Host '`nIf this shows NeedsLogin or AuthFailed, verify your TAILSCALE_AUTH_KEY is a reusable pre-auth key (not a one-time/ephemeral key).'
            Write-Host 'Create a reusable pre-auth key at https://login.tailscale.com/admin/keys and store it in the repository secret TAILSCALE_AUTH_KEY.'
            exit 1
          }

          # Get IP and verify RDP port
          $tsIP = (& $tailscaleExe ip -4) -join "`n"
          $tsIP = $tsIP -split '\s+' | Where-Object { $_ -match '\d+\.\d+\.\d+\.\d+' } | Select-Object -First 1
          if (-not $tsIP) { Write-Error 'Tailscale is connected but failed to get an IPv4 address.'; exit 1 }
          Write-Host "Tailscale IP assigned: $tsIP"
          $testResult = Test-NetConnection -ComputerName $tsIP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection to RDP port 3389 on $tsIP failed."; exit 1 }
          Write-Host "Successfully connected to RDP port 3389 on Tailscale IP $tsIP."

      - name: Optional: send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if (-not $env:DISCORD_WEBHOOK) { Write-Host 'DISCORD_WEBHOOK not set; skipping.'; exit 0 }
          $payload = @{ content = "rdp-client active (runner: $env:GITHUB_RUN_ID)" } | ConvertTo-Json -Compress
          try { Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop } catch { Write-Host "Discord send failed: $_" }

      - name: Maintain heartbeat (optional)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          while ($true) {
            if ($env:DISCORD_WEBHOOK) {
              $payload = @{ content = "rdp-client heartbeat (runner: $env:GITHUB_RUN_ID)" } | ConvertTo-Json -Compress
              try { Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload -ErrorAction Stop } catch { Write-Host "Discord send failed: $_" }
            }
            Start-Sleep -Seconds 300
          }